
/* This file was automatically generated by ./make_skeleton.py */
#include <X11/extensions/Xrandr.h>
#include <X11/Xlib.h>

static int (*_XRRQueryExtension)(Display *dpy, int *event_base_return, int *error_base_return);
int XRRQueryExtension(Display *dpy, int *event_base_return, int *error_base_return) {
return _XRRQueryExtension(dpy, event_base_return, error_base_return);
}


static int (*_XRRQueryVersion)(Display *dpy, int *major_version_return, int *minor_version_return);
int XRRQueryVersion(Display *dpy, int *major_version_return, int *minor_version_return) {
return _XRRQueryVersion(dpy, major_version_return, minor_version_return);
}


static XRRScreenConfiguration * (*_XRRGetScreenInfo)(Display *dpy, Window window);
XRRScreenConfiguration * XRRGetScreenInfo(Display *dpy, Window window) {
return _XRRGetScreenInfo(dpy, window);
}


static void (*_XRRFreeScreenConfigInfo)(XRRScreenConfiguration *config);
void XRRFreeScreenConfigInfo(XRRScreenConfiguration *config) {
_XRRFreeScreenConfigInfo(config);
}


static int (*_XRRSetScreenConfig)(Display *dpy, XRRScreenConfiguration *config, Drawable draw, int size_index, Rotation rotation, Time timestamp);
int XRRSetScreenConfig(Display *dpy, XRRScreenConfiguration *config, Drawable draw, int size_index, Rotation rotation, Time timestamp) {
return _XRRSetScreenConfig(dpy, config, draw, size_index, rotation, timestamp);
}


static int (*_XRRSetScreenConfigAndRate)(Display *dpy, XRRScreenConfiguration *config, Drawable draw, int size_index, Rotation rotation, short rate, Time timestamp);
int XRRSetScreenConfigAndRate(Display *dpy, XRRScreenConfiguration *config, Drawable draw, int size_index, Rotation rotation, short rate, Time timestamp) {
return _XRRSetScreenConfigAndRate(dpy, config, draw, size_index, rotation, rate, timestamp);
}


static Rotation (*_XRRConfigRotations)(XRRScreenConfiguration *config, Rotation *current_rotation);
Rotation XRRConfigRotations(XRRScreenConfiguration *config, Rotation *current_rotation) {
return _XRRConfigRotations(config, current_rotation);
}


static Time (*_XRRConfigTimes)(XRRScreenConfiguration *config, Time *config_timestamp);
Time XRRConfigTimes(XRRScreenConfiguration *config, Time *config_timestamp) {
return _XRRConfigTimes(config, config_timestamp);
}


static XRRScreenSize * (*_XRRConfigSizes)(XRRScreenConfiguration *config, int *nsizes);
XRRScreenSize * XRRConfigSizes(XRRScreenConfiguration *config, int *nsizes) {
return _XRRConfigSizes(config, nsizes);
}


static short * (*_XRRConfigRates)(XRRScreenConfiguration *config, int sizeID, int *nrates);
short * XRRConfigRates(XRRScreenConfiguration *config, int sizeID, int *nrates) {
return _XRRConfigRates(config, sizeID, nrates);
}


static SizeID (*_XRRConfigCurrentConfiguration)(XRRScreenConfiguration *config, Rotation *rotation);
SizeID XRRConfigCurrentConfiguration(XRRScreenConfiguration *config, Rotation *rotation) {
return _XRRConfigCurrentConfiguration(config, rotation);
}


static short (*_XRRConfigCurrentRate)(XRRScreenConfiguration *config);
short XRRConfigCurrentRate(XRRScreenConfiguration *config) {
return _XRRConfigCurrentRate(config);
}


static int (*_XRRRootToScreen)(Display *dpy, Window root);
int XRRRootToScreen(Display *dpy, Window root) {
return _XRRRootToScreen(dpy, root);
}


static void (*_XRRSelectInput)(Display *dpy, Window window, int mask);
void XRRSelectInput(Display *dpy, Window window, int mask) {
_XRRSelectInput(dpy, window, mask);
}


static Rotation (*_XRRRotations)(Display *dpy, int screen, Rotation *current_rotation);
Rotation XRRRotations(Display *dpy, int screen, Rotation *current_rotation) {
return _XRRRotations(dpy, screen, current_rotation);
}


static XRRScreenSize * (*_XRRSizes)(Display *dpy, int screen, int *nsizes);
XRRScreenSize * XRRSizes(Display *dpy, int screen, int *nsizes) {
return _XRRSizes(dpy, screen, nsizes);
}


static short * (*_XRRRates)(Display *dpy, int screen, int sizeID, int *nrates);
short * XRRRates(Display *dpy, int screen, int sizeID, int *nrates) {
return _XRRRates(dpy, screen, sizeID, nrates);
}


static Time (*_XRRTimes)(Display *dpy, int screen, Time *config_timestamp);
Time XRRTimes(Display *dpy, int screen, Time *config_timestamp) {
return _XRRTimes(dpy, screen, config_timestamp);
}


static int (*_XRRGetScreenSizeRange)(Display *dpy, Window window, int *minWidth, int *minHeight, int *maxWidth, int *maxHeight);
int XRRGetScreenSizeRange(Display *dpy, Window window, int *minWidth, int *minHeight, int *maxWidth, int *maxHeight) {
return _XRRGetScreenSizeRange(dpy, window, minWidth, minHeight, maxWidth, maxHeight);
}


static void (*_XRRSetScreenSize)(Display *dpy, Window window, int width, int height, int mmWidth, int mmHeight);
void XRRSetScreenSize(Display *dpy, Window window, int width, int height, int mmWidth, int mmHeight) {
_XRRSetScreenSize(dpy, window, width, height, mmWidth, mmHeight);
}


static XRRScreenResources * (*_XRRGetScreenResources)(Display *dpy, Window window);

static void (*_XRRFreeScreenResources)(XRRScreenResources *resources);
void XRRFreeScreenResources(XRRScreenResources *resources) {
_XRRFreeScreenResources(resources);
}


static XRROutputInfo * (*_XRRGetOutputInfo)(Display *dpy, XRRScreenResources *resources, RROutput output);

static void (*_XRRFreeOutputInfo)(XRROutputInfo *outputInfo);
void XRRFreeOutputInfo(XRROutputInfo *outputInfo) {
_XRRFreeOutputInfo(outputInfo);
}


static Atom * (*_XRRListOutputProperties)(Display *dpy, RROutput output, int *nprop);
Atom * XRRListOutputProperties(Display *dpy, RROutput output, int *nprop) {
 output = output & ~XID_SPLIT_MOD;
return _XRRListOutputProperties(dpy, output, nprop);
}


static XRRPropertyInfo * (*_XRRQueryOutputProperty)(Display *dpy, RROutput output, Atom property);
XRRPropertyInfo * XRRQueryOutputProperty(Display *dpy, RROutput output, Atom property) {
 output = output & ~XID_SPLIT_MOD;
return _XRRQueryOutputProperty(dpy, output, property);
}


static void (*_XRRConfigureOutputProperty)(Display *dpy, RROutput output, Atom property, int pending, int range, int num_values, long *values);
void XRRConfigureOutputProperty(Display *dpy, RROutput output, Atom property, int pending, int range, int num_values, long *values) {
 output = output & ~XID_SPLIT_MOD;
_XRRConfigureOutputProperty(dpy, output, property, pending, range, num_values, values);
}


static void (*_XRRChangeOutputProperty)(Display *dpy, RROutput output, Atom property, Atom type, int format, int mode, const unsigned char *data, int nelements);
void XRRChangeOutputProperty(Display *dpy, RROutput output, Atom property, Atom type, int format, int mode, const unsigned char *data, int nelements) {
 output = output & ~XID_SPLIT_MOD;
_XRRChangeOutputProperty(dpy, output, property, type, format, mode, data, nelements);
}


static void (*_XRRDeleteOutputProperty)(Display *dpy, RROutput output, Atom property);
void XRRDeleteOutputProperty(Display *dpy, RROutput output, Atom property) {
 output = output & ~XID_SPLIT_MOD;
_XRRDeleteOutputProperty(dpy, output, property);
}


static int (*_XRRGetOutputProperty)(Display *dpy, RROutput output, Atom property, long offset, long length, int _delete, int pending, Atom req_type, Atom *actual_type, int *actual_format, unsigned long *nitems, unsigned long *bytes_after, unsigned char **prop);
int XRRGetOutputProperty(Display *dpy, RROutput output, Atom property, long offset, long length, int _delete, int pending, Atom req_type, Atom *actual_type, int *actual_format, unsigned long *nitems, unsigned long *bytes_after, unsigned char **prop) {
 output = output & ~XID_SPLIT_MOD;
return _XRRGetOutputProperty(dpy, output, property, offset, length, _delete, pending, req_type, actual_type, actual_format, nitems, bytes_after, prop);
}


static XRRModeInfo * (*_XRRAllocModeInfo)(const char *name, int nameLength);
XRRModeInfo * XRRAllocModeInfo(const char *name, int nameLength) {
return _XRRAllocModeInfo(name, nameLength);
}


static RRMode (*_XRRCreateMode)(Display *dpy, Window window, XRRModeInfo *modeInfo);
RRMode XRRCreateMode(Display *dpy, Window window, XRRModeInfo *modeInfo) {
return _XRRCreateMode(dpy, window, modeInfo);
}


static void (*_XRRDestroyMode)(Display *dpy, RRMode mode);
void XRRDestroyMode(Display *dpy, RRMode mode) {
_XRRDestroyMode(dpy, mode);
}


static void (*_XRRAddOutputMode)(Display *dpy, RROutput output, RRMode mode);
void XRRAddOutputMode(Display *dpy, RROutput output, RRMode mode) {
 output = output & ~XID_SPLIT_MOD;
_XRRAddOutputMode(dpy, output, mode);
}


static void (*_XRRDeleteOutputMode)(Display *dpy, RROutput output, RRMode mode);
void XRRDeleteOutputMode(Display *dpy, RROutput output, RRMode mode) {
 output = output & ~XID_SPLIT_MOD;
_XRRDeleteOutputMode(dpy, output, mode);
}


static void (*_XRRFreeModeInfo)(XRRModeInfo *modeInfo);
void XRRFreeModeInfo(XRRModeInfo *modeInfo) {
_XRRFreeModeInfo(modeInfo);
}


static XRRCrtcInfo * (*_XRRGetCrtcInfo)(Display *dpy, XRRScreenResources *resources, RRCrtc crtc);

static void (*_XRRFreeCrtcInfo)(XRRCrtcInfo *crtcInfo);
void XRRFreeCrtcInfo(XRRCrtcInfo *crtcInfo) {
_XRRFreeCrtcInfo(crtcInfo);
}


static int (*_XRRSetCrtcConfig)(Display *dpy, XRRScreenResources *resources, RRCrtc crtc, Time timestamp, int x, int y, RRMode mode, Rotation rotation, RROutput *outputs, int noutputs);

static int (*_XRRGetCrtcGammaSize)(Display *dpy, RRCrtc crtc);
int XRRGetCrtcGammaSize(Display *dpy, RRCrtc crtc) {
 crtc = crtc & ~XID_SPLIT_MOD;
return _XRRGetCrtcGammaSize(dpy, crtc);
}


static XRRCrtcGamma * (*_XRRGetCrtcGamma)(Display *dpy, RRCrtc crtc);
XRRCrtcGamma * XRRGetCrtcGamma(Display *dpy, RRCrtc crtc) {
 crtc = crtc & ~XID_SPLIT_MOD;
return _XRRGetCrtcGamma(dpy, crtc);
}


static XRRCrtcGamma * (*_XRRAllocGamma)(int size);
XRRCrtcGamma * XRRAllocGamma(int size) {
return _XRRAllocGamma(size);
}


static void (*_XRRSetCrtcGamma)(Display *dpy, RRCrtc crtc, XRRCrtcGamma *gamma);
void XRRSetCrtcGamma(Display *dpy, RRCrtc crtc, XRRCrtcGamma *gamma) {
 crtc = crtc & ~XID_SPLIT_MOD;
_XRRSetCrtcGamma(dpy, crtc, gamma);
}


static void (*_XRRFreeGamma)(XRRCrtcGamma *gamma);
void XRRFreeGamma(XRRCrtcGamma *gamma) {
_XRRFreeGamma(gamma);
}


static XRRScreenResources * (*_XRRGetScreenResourcesCurrent)(Display *dpy, Window window);

static void (*_XRRSetCrtcTransform)(Display *dpy, RRCrtc crtc, XTransform *transform, const char *filter, XFixed *params, int nparams);
void XRRSetCrtcTransform(Display *dpy, RRCrtc crtc, XTransform *transform, const char *filter, XFixed *params, int nparams) {
 crtc = crtc & ~XID_SPLIT_MOD;
_XRRSetCrtcTransform(dpy, crtc, transform, filter, params, nparams);
}


static int (*_XRRGetCrtcTransform)(Display *dpy, RRCrtc crtc, XRRCrtcTransformAttributes **attributes);
int XRRGetCrtcTransform(Display *dpy, RRCrtc crtc, XRRCrtcTransformAttributes **attributes) {
 crtc = crtc & ~XID_SPLIT_MOD;
return _XRRGetCrtcTransform(dpy, crtc, attributes);
}


static int (*_XRRUpdateConfiguration)(XEvent *event);
int XRRUpdateConfiguration(XEvent *event) {
return _XRRUpdateConfiguration(event);
}


static XRRPanning * (*_XRRGetPanning)(Display *dpy, XRRScreenResources *resources, RRCrtc crtc);
XRRPanning * XRRGetPanning(Display *dpy, XRRScreenResources *resources, RRCrtc crtc) {
 crtc = crtc & ~XID_SPLIT_MOD;
return _XRRGetPanning(dpy, resources, crtc);
}


static void (*_XRRFreePanning)(XRRPanning *panning);
void XRRFreePanning(XRRPanning *panning) {
_XRRFreePanning(panning);
}


static int (*_XRRSetPanning)(Display *dpy, XRRScreenResources *resources, RRCrtc crtc, XRRPanning *panning);
int XRRSetPanning(Display *dpy, XRRScreenResources *resources, RRCrtc crtc, XRRPanning *panning) {
 crtc = crtc & ~XID_SPLIT_MOD;
return _XRRSetPanning(dpy, resources, crtc, panning);
}


static void (*_XRRSetOutputPrimary)(Display *dpy, Window window, RROutput output);
void XRRSetOutputPrimary(Display *dpy, Window window, RROutput output) {
 output = output & ~XID_SPLIT_MOD;
_XRRSetOutputPrimary(dpy, window, output);
}


static RROutput (*_XRRGetOutputPrimary)(Display *dpy, Window window);
RROutput XRRGetOutputPrimary(Display *dpy, Window window) {
return _XRRGetOutputPrimary(dpy, window);
}


static XRRProviderResources * (*_XRRGetProviderResources)(Display *dpy, Window window);
XRRProviderResources * XRRGetProviderResources(Display *dpy, Window window) {
return _XRRGetProviderResources(dpy, window);
}


static void (*_XRRFreeProviderResources)(XRRProviderResources *resources);
void XRRFreeProviderResources(XRRProviderResources *resources) {
_XRRFreeProviderResources(resources);
}


static XRRProviderInfo * (*_XRRGetProviderInfo)(Display *dpy, XRRScreenResources *resources, RRProvider provider);
XRRProviderInfo * XRRGetProviderInfo(Display *dpy, XRRScreenResources *resources, RRProvider provider) {
return _XRRGetProviderInfo(dpy, resources, provider);
}


static void (*_XRRFreeProviderInfo)(XRRProviderInfo *provider);
void XRRFreeProviderInfo(XRRProviderInfo *provider) {
_XRRFreeProviderInfo(provider);
}


static int (*_XRRSetProviderOutputSource)(Display *dpy, XID provider, XID source_provider);
int XRRSetProviderOutputSource(Display *dpy, XID provider, XID source_provider) {
return _XRRSetProviderOutputSource(dpy, provider, source_provider);
}


static int (*_XRRSetProviderOffloadSink)(Display *dpy, XID provider, XID sink_provider);
int XRRSetProviderOffloadSink(Display *dpy, XID provider, XID sink_provider) {
return _XRRSetProviderOffloadSink(dpy, provider, sink_provider);
}


static Atom * (*_XRRListProviderProperties)(Display *dpy, RRProvider provider, int *nprop);
Atom * XRRListProviderProperties(Display *dpy, RRProvider provider, int *nprop) {
return _XRRListProviderProperties(dpy, provider, nprop);
}


static XRRPropertyInfo * (*_XRRQueryProviderProperty)(Display *dpy, RRProvider provider, Atom property);
XRRPropertyInfo * XRRQueryProviderProperty(Display *dpy, RRProvider provider, Atom property) {
return _XRRQueryProviderProperty(dpy, provider, property);
}


static void (*_XRRConfigureProviderProperty)(Display *dpy, RRProvider provider, Atom property, int pending, int range, int num_values, long *values);
void XRRConfigureProviderProperty(Display *dpy, RRProvider provider, Atom property, int pending, int range, int num_values, long *values) {
_XRRConfigureProviderProperty(dpy, provider, property, pending, range, num_values, values);
}


static void (*_XRRChangeProviderProperty)(Display *dpy, RRProvider provider, Atom property, Atom type, int format, int mode, const unsigned char *data, int nelements);
void XRRChangeProviderProperty(Display *dpy, RRProvider provider, Atom property, Atom type, int format, int mode, const unsigned char *data, int nelements) {
_XRRChangeProviderProperty(dpy, provider, property, type, format, mode, data, nelements);
}


static void (*_XRRDeleteProviderProperty)(Display *dpy, RRProvider provider, Atom property);
void XRRDeleteProviderProperty(Display *dpy, RRProvider provider, Atom property) {
_XRRDeleteProviderProperty(dpy, provider, property);
}


static int (*_XRRGetProviderProperty)(Display *dpy, RRProvider provider, Atom property, long offset, long length, int _delete, int pending, Atom req_type, Atom *actual_type, int *actual_format, unsigned long *nitems, unsigned long *bytes_after, unsigned char **prop);
int XRRGetProviderProperty(Display *dpy, RRProvider provider, Atom property, long offset, long length, int _delete, int pending, Atom req_type, Atom *actual_type, int *actual_format, unsigned long *nitems, unsigned long *bytes_after, unsigned char **prop) {
return _XRRGetProviderProperty(dpy, provider, property, offset, length, _delete, pending, req_type, actual_type, actual_format, nitems, bytes_after, prop);
}


#define FUNCTION_POINTER_INITIALIZATIONS _XRRQueryExtension = dlsym(xrandr_lib, "XRRQueryExtension"); _XRRQueryVersion = dlsym(xrandr_lib, "XRRQueryVersion"); _XRRGetScreenInfo = dlsym(xrandr_lib, "XRRGetScreenInfo"); _XRRFreeScreenConfigInfo = dlsym(xrandr_lib, "XRRFreeScreenConfigInfo"); _XRRSetScreenConfig = dlsym(xrandr_lib, "XRRSetScreenConfig"); _XRRSetScreenConfigAndRate = dlsym(xrandr_lib, "XRRSetScreenConfigAndRate"); _XRRConfigRotations = dlsym(xrandr_lib, "XRRConfigRotations"); _XRRConfigTimes = dlsym(xrandr_lib, "XRRConfigTimes"); _XRRConfigSizes = dlsym(xrandr_lib, "XRRConfigSizes"); _XRRConfigRates = dlsym(xrandr_lib, "XRRConfigRates"); _XRRConfigCurrentConfiguration = dlsym(xrandr_lib, "XRRConfigCurrentConfiguration"); _XRRConfigCurrentRate = dlsym(xrandr_lib, "XRRConfigCurrentRate"); _XRRRootToScreen = dlsym(xrandr_lib, "XRRRootToScreen"); _XRRSelectInput = dlsym(xrandr_lib, "XRRSelectInput"); _XRRRotations = dlsym(xrandr_lib, "XRRRotations"); _XRRSizes = dlsym(xrandr_lib, "XRRSizes"); _XRRRates = dlsym(xrandr_lib, "XRRRates"); _XRRTimes = dlsym(xrandr_lib, "XRRTimes"); _XRRGetScreenSizeRange = dlsym(xrandr_lib, "XRRGetScreenSizeRange"); _XRRSetScreenSize = dlsym(xrandr_lib, "XRRSetScreenSize"); _XRRGetScreenResources = dlsym(xrandr_lib, "XRRGetScreenResources"); _XRRFreeScreenResources = dlsym(xrandr_lib, "XRRFreeScreenResources"); _XRRGetOutputInfo = dlsym(xrandr_lib, "XRRGetOutputInfo"); _XRRFreeOutputInfo = dlsym(xrandr_lib, "XRRFreeOutputInfo"); _XRRListOutputProperties = dlsym(xrandr_lib, "XRRListOutputProperties"); _XRRQueryOutputProperty = dlsym(xrandr_lib, "XRRQueryOutputProperty"); _XRRConfigureOutputProperty = dlsym(xrandr_lib, "XRRConfigureOutputProperty"); _XRRChangeOutputProperty = dlsym(xrandr_lib, "XRRChangeOutputProperty"); _XRRDeleteOutputProperty = dlsym(xrandr_lib, "XRRDeleteOutputProperty"); _XRRGetOutputProperty = dlsym(xrandr_lib, "XRRGetOutputProperty"); _XRRAllocModeInfo = dlsym(xrandr_lib, "XRRAllocModeInfo"); _XRRCreateMode = dlsym(xrandr_lib, "XRRCreateMode"); _XRRDestroyMode = dlsym(xrandr_lib, "XRRDestroyMode"); _XRRAddOutputMode = dlsym(xrandr_lib, "XRRAddOutputMode"); _XRRDeleteOutputMode = dlsym(xrandr_lib, "XRRDeleteOutputMode"); _XRRFreeModeInfo = dlsym(xrandr_lib, "XRRFreeModeInfo"); _XRRGetCrtcInfo = dlsym(xrandr_lib, "XRRGetCrtcInfo"); _XRRFreeCrtcInfo = dlsym(xrandr_lib, "XRRFreeCrtcInfo"); _XRRSetCrtcConfig = dlsym(xrandr_lib, "XRRSetCrtcConfig"); _XRRGetCrtcGammaSize = dlsym(xrandr_lib, "XRRGetCrtcGammaSize"); _XRRGetCrtcGamma = dlsym(xrandr_lib, "XRRGetCrtcGamma"); _XRRAllocGamma = dlsym(xrandr_lib, "XRRAllocGamma"); _XRRSetCrtcGamma = dlsym(xrandr_lib, "XRRSetCrtcGamma"); _XRRFreeGamma = dlsym(xrandr_lib, "XRRFreeGamma"); _XRRGetScreenResourcesCurrent = dlsym(xrandr_lib, "XRRGetScreenResourcesCurrent"); _XRRSetCrtcTransform = dlsym(xrandr_lib, "XRRSetCrtcTransform"); _XRRGetCrtcTransform = dlsym(xrandr_lib, "XRRGetCrtcTransform"); _XRRUpdateConfiguration = dlsym(xrandr_lib, "XRRUpdateConfiguration"); _XRRGetPanning = dlsym(xrandr_lib, "XRRGetPanning"); _XRRFreePanning = dlsym(xrandr_lib, "XRRFreePanning"); _XRRSetPanning = dlsym(xrandr_lib, "XRRSetPanning"); _XRRSetOutputPrimary = dlsym(xrandr_lib, "XRRSetOutputPrimary"); _XRRGetOutputPrimary = dlsym(xrandr_lib, "XRRGetOutputPrimary"); _XRRGetProviderResources = dlsym(xrandr_lib, "XRRGetProviderResources"); _XRRFreeProviderResources = dlsym(xrandr_lib, "XRRFreeProviderResources"); _XRRGetProviderInfo = dlsym(xrandr_lib, "XRRGetProviderInfo"); _XRRFreeProviderInfo = dlsym(xrandr_lib, "XRRFreeProviderInfo"); _XRRSetProviderOutputSource = dlsym(xrandr_lib, "XRRSetProviderOutputSource"); _XRRSetProviderOffloadSink = dlsym(xrandr_lib, "XRRSetProviderOffloadSink"); _XRRListProviderProperties = dlsym(xrandr_lib, "XRRListProviderProperties"); _XRRQueryProviderProperty = dlsym(xrandr_lib, "XRRQueryProviderProperty"); _XRRConfigureProviderProperty = dlsym(xrandr_lib, "XRRConfigureProviderProperty"); _XRRChangeProviderProperty = dlsym(xrandr_lib, "XRRChangeProviderProperty"); _XRRDeleteProviderProperty = dlsym(xrandr_lib, "XRRDeleteProviderProperty"); _XRRGetProviderProperty = dlsym(xrandr_lib, "XRRGetProviderProperty")
